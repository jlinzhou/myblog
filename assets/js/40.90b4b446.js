(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{429:function(t,n,a){"use strict";a.r(n);var r=a(24),e=Object(r.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"九大排序算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九大排序算法"}},[t._v("#")]),t._v(" 九大排序算法")]),t._v(" "),a("h3",{attrs:{id:"综合比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#综合比较"}},[t._v("#")]),t._v(" 综合比较")]),t._v(" "),a("p",[a("strong",[t._v("1、稳定性")])]),t._v(" "),a("p",[t._v("归并排序、冒泡排序、插入排序。基数排序是稳定的")]),t._v(" "),a("p",[t._v("选择排序、快速排序、希尔排序、堆排序是不稳定的")]),t._v(" "),a("p",[t._v("**2、时间复杂度 **")]),t._v(" "),a("p",[t._v("最基础的四个算法：冒泡、选择、插入、快排中，快排的时间复杂度最小O(n*log2n)，其他都是O（n2）")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("排序法")]),t._v(" "),a("th",[t._v("平均时间")]),t._v(" "),a("th",[t._v("最差情形")]),t._v(" "),a("th",[t._v("稳定度")]),t._v(" "),a("th",[t._v("额外空间")]),t._v(" "),a("th",[t._v("备注")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("冒泡")]),t._v(" "),a("td",[t._v("O(n2)")]),t._v(" "),a("td",[t._v("O(n2)")]),t._v(" "),a("td",[t._v("稳定")]),t._v(" "),a("td",[t._v("O(1)")]),t._v(" "),a("td",[t._v("n小时较好")])]),t._v(" "),a("tr",[a("td",[t._v("选择")]),t._v(" "),a("td",[t._v("O(n2)")]),t._v(" "),a("td",[t._v("O(n2)")]),t._v(" "),a("td",[t._v("不稳定")]),t._v(" "),a("td",[t._v("O(1)")]),t._v(" "),a("td",[t._v("n小时较好")])]),t._v(" "),a("tr",[a("td",[t._v("插入")]),t._v(" "),a("td",[t._v("O(n2)")]),t._v(" "),a("td",[t._v("O(n2)")]),t._v(" "),a("td",[t._v("稳定")]),t._v(" "),a("td",[t._v("O(1)")]),t._v(" "),a("td",[t._v("大部分已排序时较好")])]),t._v(" "),a("tr",[a("td",[t._v("基数")]),t._v(" "),a("td",[t._v("O(logRB)")]),t._v(" "),a("td",[t._v("O(logRB)")]),t._v(" "),a("td",[t._v("稳定")]),t._v(" "),a("td",[t._v("O(n)")]),t._v(" "),a("td",[t._v("B是真数(0-9)，R是基数(个十百)")])]),t._v(" "),a("tr",[a("td",[t._v("Shell")]),t._v(" "),a("td",[t._v("O(nlogn)")]),t._v(" "),a("td",[t._v("O(ns) 1<s<2")]),t._v(" "),a("td",[t._v("不稳定")]),t._v(" "),a("td",[t._v("O(1)")]),t._v(" "),a("td",[t._v("s是所选分组")])]),t._v(" "),a("tr",[a("td",[t._v("快速")]),t._v(" "),a("td",[t._v("O(nlogn)")]),t._v(" "),a("td",[t._v("O(n2)")]),t._v(" "),a("td",[t._v("不稳定")]),t._v(" "),a("td",[t._v("O(nlogn)")]),t._v(" "),a("td",[t._v("n大时较好")])]),t._v(" "),a("tr",[a("td",[t._v("归并")]),t._v(" "),a("td",[t._v("O(nlogn)")]),t._v(" "),a("td",[t._v("O(nlogn)")]),t._v(" "),a("td",[t._v("稳定")]),t._v(" "),a("td",[t._v("O(1)")]),t._v(" "),a("td",[t._v("n大时较好")])]),t._v(" "),a("tr",[a("td",[t._v("堆")]),t._v(" "),a("td",[t._v("O(nlogn)")]),t._v(" "),a("td",[t._v("O(nlogn)")]),t._v(" "),a("td",[t._v("不稳定")]),t._v(" "),a("td",[t._v("O(1)")]),t._v(" "),a("td",[t._v("n大时较好")])])])]),t._v(" "),a("h3",{attrs:{id:"选择排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择排序"}},[t._v("#")]),t._v(" 选择排序")]),t._v(" "),a("p",[t._v("算法思想：选择排序，从头至尾扫描序列，找出最小的一个元素，和第一个元素交换，接着从剩下的元素中继续这种选择和交换方式，最终得到一个有序序列。")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func selectSort(a []int) []int {\n\tif len(a) <= 1 {\n\t\treturn a\n\t}\n\tfor i := 0; i < len(a); i++ {\n\t\tmin := i\n\t\tfor j := i + 1; j < len(a); j++ {\n\t\t\tif a[min] > a[j] {\n\t\t\t\tmin = j\n\t\t\t}\n\t\t}\n\t\tif min != i {\n\t\t\ta[i], a[min] = a[min], a[i]\n\t\t}\n\n\t}\n\treturn a\n}\n")])])]),a("h3",{attrs:{id:"插入排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入排序"}},[t._v("#")]),t._v(" 插入排序")]),t._v(" "),a("p",[t._v("将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func insertSort(a []int) []int {\n\tlength := len(a)\n\tif length <= 1 {\n\t\treturn a\n\t}\n\tfor i := 0; i < length; i++ {\n\t\tback := a[i]\n\t\tj := i - 1\n\t\tfor j > 0 && back < a[j] {\n\t\t\ta[j+1] = a[j]\n\t\t\tj--\n\t\t}\n\t\ta[j+1] = back\n\t}\n\n\treturn a\n}\n")])])]),a("h3",{attrs:{id:"冒泡排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序"}},[t._v("#")]),t._v(" 冒泡排序")]),t._v(" "),a("p",[t._v("在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func bubbleSort(a []int) []int {\n\tfor i := 0; i < len(a); i++ {\n\t\tfor j := i + 1; j < len(a); j++ {\n\t\t\tif a[j] < a[j-1] {\n\t\t\t\ta[j], a[j-1] = a[j-1], a[j]\n\t\t\t}\n\t\t}\n\t}\n\treturn a\n}\n")])])]),a("h2",{attrs:{id:"堆排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆排序"}},[t._v("#")]),t._v(" 堆排序")]),t._v(" "),a("p",[t._v("堆排序是一种树形选择排序，是对直接选择排序的有效改进。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1940317-9c37b4be1b7c96d1.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/950/format/webp",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"快速排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速排序"}},[t._v("#")]),t._v(" 快速排序")]),t._v(" "),a("p",[a("strong",[t._v("基本思想：")])]),t._v(" "),a("p",[t._v("1）选择一个基准元素,通常选择第一个元素或者最后一个元素,")]),t._v(" "),a("p",[t._v("2）通过一趟排序讲待排序的记录分割成独立的两部分，其中一部分记录的元素值均比基准元素值小。另一部分记录的 元素值比基准值大。")]),t._v(" "),a("p",[t._v("3）此时基准元素在其排好序后的正确位置")]),t._v(" "),a("p",[t._v("4）然后分别对这两部分记录用同样的方法继续进行排序，直到整个序列有序。")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\nfunc quickSort(a []int) []int {\n\tlength := len(a)\n\tif length <= 1 {\n\t\treturn a\n\t}\n\tsplitdata := a[0]\n\tlow := make([]int, 0)\n\tmid := make([]int, 0)\n\thigh := make([]int, 0)\n\tmid = append(mid, splitdata)\n\n\tfor i := 1; i < len(a); i++ {\n\t\tif a[i] < splitdata {\n\t\t\tlow = append(low, a[i])\n\t\t} else if a[i] > splitdata {\n\t\t\thigh = append(high, a[i])\n\t\t} else {\n\t\t\tmid = append(mid, a[i])\n\t\t}\n\t}\n\tlow, high = quickSort(low), quickSort(high)\n\tmyarr := append(append(low, mid...), high...)\n\n\treturn myarr\n}\n")])])]),a("h3",{attrs:{id:"归并排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#归并排序"}},[t._v("#")]),t._v(" 归并排序")]),t._v(" "),a("p",[t._v("归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.cxyxiaowu.com/wp-content/uploads/2019/12/1575556975-646803d6678ecbb.jpg",alt:""}})]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\nfunc merge(leftarr []int,rightarr []int) []int{\n\tleftindex:=0//左边索引\n\trightindex:=0//右边索引\n\tlastarr:=[]int {}//最终的数组\n\tfor leftindex<len(leftarr) &&  rightindex<len(rightarr){\n\t\tif leftarr[leftindex]  <rightarr[rightindex]{\n\t\t\tlastarr=append(lastarr,leftarr[leftindex] )\n\t\t\tleftindex++\n\n\t\t}else if leftarr[leftindex]  >rightarr[rightindex]{\n\t\t\tlastarr=append(lastarr,rightarr[rightindex] )\n\t\t\trightindex++\n\t\t} else{\n\t\t\tlastarr=append(lastarr,rightarr[rightindex] )\n\t\t\tlastarr=append(lastarr,leftarr[leftindex])\n\t\t\tleftindex++\n\t\t\trightindex++\n\t\t}\n\t}\n\tfor leftindex< len(leftarr){  //把没有结束的归并过来\n\t\tlastarr=append(lastarr,leftarr[leftindex] )\n\t\tleftindex++\n\t}\n\tfor rightindex<len(rightarr){  //把没有结束的归并过来\n\t\tlastarr=append(lastarr,rightarr[rightindex] )\n\t\trightindex++\n\t}\n\treturn  lastarr\n}\n\nfunc MergeSort(arr[] int) []int{\n\tlength:=len(arr)\n\tif length<=1{\n\t\treturn arr  //小与10改用插入排序\n\t}else if length>1 &&length <5{\n\t\treturn InsertSortX(arr)\n\t} else{\n\t\tmid:=length/2\n\t\tleftarr:=MergeSort(arr[:mid])\n\t\trightarr:=MergeSort(arr[mid:])\n\n\t\treturn merge(leftarr,rightarr)\n\t}\n}\n\n\nfunc InsertSortX(arr [] int) []int{\n\tlength:=len(arr)//数组长度\n\tif length <=1{\n\t\treturn arr //一个元素的数组，直接返回\n\t}else{\n\t\tfor i:=1;i<length;i++{ //跳过第一个\n\t\t\tbackup :=arr[i] //备份插入的数据\n\t\t\tj:=i-1  //上一个位置循环找到位置插入\n\t\t\tfor j>=0 &&backup<arr[j]{\n\t\t\t\tarr[j+1]=arr[j]  //从前往后移动\n\t\t\t\tj--\n\t\t\t}\n\t\t\tarr[j+1]=backup  //插入\n\t\t\tfmt.Println(arr)\n\t\t}\n\n\t\treturn  arr\n\n\n\t}\n}\n")])])]),a("h3",{attrs:{id:"希尔排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#希尔排序"}},[t._v("#")]),t._v(" 希尔排序")]),t._v(" "),a("p",[a("strong",[t._v("基本思想：")])]),t._v(" "),a("p",[t._v("先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func shellSortStep(a []int, start int, gap int) {\n\tfor i := start + gap; i < len(a); i += gap {\n\t\tback := a[i]\n\t\tj := i - gap\n\t\tfor j > 0 && back < a[j] {\n\t\t\ta[j+gap] = a[j]\n\t\t\tj -= gap\n\t\t}\n\t\ta[j+gap] = back\n\t}\n}\nfunc shellSort(a []int) []int {\n\tif len(a) <= 1 {\n\t\treturn a\n\t}\n\tgap := len(a) / 2\n\tfor gap > 0 {\n\t\tfor i := 0; i < gap; i++ {\n\t\t\tshellSortStep(a, i, gap)\n\t\t}\n\t\tgap /= 2\n\t}\n\n\treturn a\n}\n")])])]),a("h3",{attrs:{id:"桶排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#桶排序"}},[t._v("#")]),t._v(" 桶排序")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func  SelectSortMaxx(arr[] int) int{\n\tlength:=len(arr)//数组长度\n\tif length <=1{\n\t\treturn arr[0] //一个元素的数组，直接返回\n\t}else{\n\t\tmax:=arr[0] //假定第一个最大\n\t\tfor i:=1;i<length;i++{\n\t\t\tif arr[i]>max{ //任何一个比我的大的数，最大的\n\t\t\t\tmax=arr[i]\n\t\t\t}\n\t\t}\n\t\treturn max\n\t}\n}\n\nfunc  RadixSort(arr[] int) []int{\n\tmax:= SelectSortMaxx(arr) //寻找数组极大值 99991\n\tfor  bit:=1;max/bit>0;bit*=10{\n\t\t//按照数量级分段\n\t\tarr=BitSort(arr ,bit )//每次处理一个级别的排序\n\t\tfmt.Println(arr)\n\t}\n\treturn arr\n}\nfunc  BitSort(arr[]int ,bit int)[]int{\n\tlength:=len(arr)//数组长度\n\tbitcounts:=make([]int,10)//统计长度0,1,2,3,4,5,6,7,8,9\n\tfor i:=0;i<length;i++{\n\t\tnum:=(arr[i]/bit)%10  //分层处理，bit=1000的，三位数不参与排序了，bit=10000的四位数不参与排序\n\t\tbitcounts[num]++  //统计余数相等个数\n\t}\n\tfmt.Println(bitcounts)\n\t//  0 1 2 3  4 5\n\t//  1 0 3 0  0  1\n\t//  1 1 4 4  4  5\n\tfor i:=1;i<10;i++{\n\t\tbitcounts[i]+=bitcounts[i-1] //叠加，计算位置\n\t}\n\tfmt.Println(bitcounts)\n\n\n\ttmp:=make([]int ,10)//开辟临时数组\n\tfor i:=length-1;i>=0;i--{\n\t\tnum:=(arr[i]/bit)%10\n\t\ttmp[bitcounts[num]-1]=arr[i] //计算排序的位置\n\t\tbitcounts[num]--\n\t}\n\n\n\n\tfor i:=0;i<length;i++{\n\t\tarr[i]=tmp[i] //保存数组\n\t}\n\treturn arr\n}\n")])])]),a("p",[t._v("顺序栈--入栈操作受数组上界的约束有可能发生栈上溢，且需要地址连续的存储单元。\n链栈--无须地址连续，便于多个栈共享存储单元，且不存在栈满上溢情况。\n顺序队列--需地址连续且有假上溢现象（需改为循环队列才可解决假上溢）\n链式队列--特别适合于数据元素变动比较大的情况，且不存在队列满而产生的溢出问题。")]),t._v(" "),a("p",[a("strong",[t._v("栈(Stack)：")]),t._v("\n优点：提供后进先出的存储方式，添加速度快，允许重复；\n缺点：只能在一头操作数据，存取其他项很慢；")]),t._v(" "),a("p",[a("strong",[t._v("队列(Queue)：")]),t._v("\n优点：提供先进先出的存储方式，添加速度快，允许重复；\n缺点：只能在一头添加，另一头获取，存取其他项很慢；")])])}),[],!1,null,null,null);n.default=e.exports}}]);