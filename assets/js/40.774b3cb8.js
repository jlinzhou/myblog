(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{429:function(v,_,t){"use strict";t.r(_);var a=t(24),r=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h3",{attrs:{id:"高并发系统的设计与实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高并发系统的设计与实现"}},[v._v("#")]),v._v(" 高并发系统的设计与实现")]),v._v(" "),t("p",[v._v("在开发高并发系统时有三把利器用来保护系统：缓存、降级和限流。")]),v._v(" "),t("ul",[t("li",[v._v("缓存：缓存比较好理解，在大型高并发系统中，如果没有缓存数据库将分分钟被爆，系统也会瞬间瘫痪。使用缓存不单单能够提升系统访问速度、提高并发访问量，也是保护数据库、保护系统的有效方式。大型网站一般主要是“读”，缓存的使用很容易被想到。在大型“写”系统中，缓存也常常扮演者非常重要的角色。比如累积一些数据批量写入，内存里面的缓存队列（生产消费），以及HBase写数据的机制等等也都是通过缓存提升系统的吞吐量或者实现系统的保护措施。甚至消息中间件，你也可以认为是一种分布式的数据缓存。")]),v._v(" "),t("li",[v._v("降级：服务降级是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行。降级往往会指定不同的级别，面临不同的异常等级执行不同的处理。根据服务方式：可以拒接服务，可以延迟服务，也有时候可以随机服务。根据服务范围：可以砍掉某个功能，也可以砍掉某些模块。总之服务降级需要根据不同的业务需求采用不同的降级策略。主要的目的就是服务虽然有损但是总比没有好。")]),v._v(" "),t("li",[v._v("限流：限流可以认为服务降级的一种，限流就是限制系统的输入和输出流量已达到保护系统的目的。一般来说系统的吞吐量是可以被测算的，为了保证系统的稳定运行，一旦达到的需要限制的阈值，就需要限制流量并采取一些措施以完成限制流量的目的。比如：延迟处理，拒绝处理，或者部分拒绝处理等等。")])]),v._v(" "),t("h3",{attrs:{id:"常见的限流算法："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见的限流算法："}},[v._v("#")]),v._v(" 常见的限流算法：")]),v._v(" "),t("p",[v._v("常见的限流算法有计数器、漏桶和令牌桶算法。漏桶算法在分布式环境中消息中间件或者Redis都是可选的方案。发放令牌的频率增加可以提升整体数据处理的速度，而通过每次获取令牌的个数增加或者放慢令牌的发放速度和降低整体数据处理速度。而漏桶不行，因为它的流出速率是固定的，程序处理速度也是固定的。")]),v._v(" "),t("h2",{attrs:{id:"操作系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作系统"}},[v._v("#")]),v._v(" 操作系统")]),v._v(" "),t("h3",{attrs:{id:"进程和线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[v._v("#")]),v._v(" 进程和线程")]),v._v(" "),t("ol",[t("li",[v._v("进程是操作系统资源分配的最小单位，线程是CPU任务调度的最小单位。一个进程可以包含多个线程，所以进程和线程都是一个时间段的描述，是CPU工作时间段的描述，不过是颗粒大小不同。")]),v._v(" "),t("li",[v._v("不同进程间数据很难共享，同一进程下不同线程间数据很易共享。")]),v._v(" "),t("li",[v._v("每个进程都有独立的代码和数据空间，进程要比线程消耗更多的计算机资源。线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器，线程之间切换的开销小。")]),v._v(" "),t("li",[v._v("进程间不会相互影响，一个线程挂掉将导致整个进程挂掉。")]),v._v(" "),t("li",[v._v("系统在运行的时候会为每个进程分配不同的内存空间；而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源。")])]),v._v(" "),t("h3",{attrs:{id:"进程的组成部分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程的组成部分"}},[v._v("#")]),v._v(" 进程的组成部分")]),v._v(" "),t("p",[v._v("进程由进程控制块（PCB）、程序段、数据段三部分组成。")]),v._v(" "),t("h3",{attrs:{id:"进程的通信方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程的通信方式"}},[v._v("#")]),v._v(" 进程的通信方式")]),v._v(" "),t("ol",[t("li",[v._v("无名管道：半双工的，即数据只能在一个方向上流动，只能用于具有亲缘关系的进程之间的通信，可以看成是一种特殊的文件，对于它的读写也可以使用普通的read、write 等函数。但是它不是普通的文件，并不属于其他任何文件系统，并且只存在于内存中。")]),v._v(" "),t("li",[v._v("FIFO命名管道：FIFO是一种文件类型，可以在无关的进程之间交换数据，与无名管道不同，FIFO有路径名与之相关联，它以一种特殊设备文件形式存在于文件系统中。")]),v._v(" "),t("li",[v._v("消息队列：消息队列，是消息的链接表，存放在内核中。一个消息队列由一个标识符（即队列ID）来标识。")]),v._v(" "),t("li",[v._v("信号量：信号量是一个计数器，信号量用于实现进程间的互斥与同步，而不是用于存储进程间通信数据。")]),v._v(" "),t("li",[v._v("共享内存：共享内存指两个或多个进程共享一个给定的存储区，一般配合信号量使用。")])]),v._v(" "),t("h3",{attrs:{id:"进程间五种通信方式的比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程间五种通信方式的比较"}},[v._v("#")]),v._v(" 进程间五种通信方式的比较")]),v._v(" "),t("ol",[t("li",[v._v("管道：速度慢，容量有限，只有父子进程能通讯。")]),v._v(" "),t("li",[v._v("FIFO：任何进程间都能通讯，但速度慢。")]),v._v(" "),t("li",[v._v("消息队列：容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题。")]),v._v(" "),t("li",[v._v("信号量：不能传递复杂消息，只能用来同步。")]),v._v(" "),t("li",[v._v("共享内存区：能够很容易控制容量，速度快，但要保持同步，比如一个进程在写的时候，另一个进程要注意读写的问题，相当于线程中的线程安全，当然，共享内存区同样可以用作线程间通讯，不过没这个必要，线程间本来就已经共享了同一进程内的一块内存。")])]),v._v(" "),t("h3",{attrs:{id:"死锁的4个必要条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#死锁的4个必要条件"}},[v._v("#")]),v._v(" 死锁的4个必要条件")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("互斥条件：一个资源每次只能被一个线程使用；")])]),v._v(" "),t("li",[t("p",[v._v("请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放；")])]),v._v(" "),t("li",[t("p",[v._v("不剥夺条件：进程已经获得的资源，在未使用完之前，不能强行剥夺；")])]),v._v(" "),t("li",[t("p",[v._v("循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系。")])])]),v._v(" "),t("p",[v._v("​\t空指针：未被初始化的指针。var p *int    *p--\x3eerr")]),v._v(" "),t("p",[v._v("​\t野指针：被一片无效的地址空间初始化。")]),v._v(" "),t("h3",{attrs:{id:"如何避免（预防）死锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何避免（预防）死锁"}},[v._v("#")]),v._v(" 如何避免（预防）死锁")]),v._v(" "),t("ol",[t("li",[v._v("破坏“请求和保持”条件：让进程在申请资源时，一次性申请所有需要用到的资源，不要一次一次来申请，当申请的资源有一些没空，那就让线程等待。不过这个方法比较浪费资源，进程可能经常处于饥饿状态。还有一种方法是，要求进程在申请资源前，要释放自己拥有的资源。")]),v._v(" "),t("li",[v._v("破坏“不可抢占”条件：允许进程进行抢占，方法一：如果去抢资源，被拒绝，就释放自己的资源。方法二：操作系统允许抢，只要你优先级大，可以抢到。")]),v._v(" "),t("li",[v._v("破坏“循环等待”条件：将系统中的所有资源统一编号，进程可在任何时刻提出资源申请，但所有申请必须按照资源的编号顺序提出（指定获取锁的顺序，顺序加锁）。")])])])}),[],!1,null,null,null);_.default=r.exports}}]);