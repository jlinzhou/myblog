(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{425:function(_,a,t){"use strict";t.r(a);var v=t(24),r=Object(v.a)({},(function(){var _=this,a=_.$createElement,t=_._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h3",{attrs:{id:"_1、明确问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、明确问题"}},[_._v("#")]),_._v(" 1、明确问题")]),_._v(" "),t("p",[_._v("数据需要永久保存吗")]),_._v(" "),t("p",[_._v("QPS多少")]),_._v(" "),t("p",[_._v("读多还是写多")]),_._v(" "),t("p",[_._v("字符长度多少")]),_._v(" "),t("ul",[t("li",[_._v("谁会使用它？")]),_._v(" "),t("li",[_._v("他们会怎样使用它？")]),_._v(" "),t("li",[_._v("有多少用户？")]),_._v(" "),t("li",[_._v("系统的作用是什么？")]),_._v(" "),t("li",[_._v("系统的输入输出分别是什么？")]),_._v(" "),t("li",[_._v("我们希望处理多少数据？")]),_._v(" "),t("li",[_._v("我们希望每秒钟处理多少请求？")]),_._v(" "),t("li",[_._v("我们希望的读写比率？")])]),_._v(" "),t("h3",{attrs:{id:"_2、解决方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、解决方法"}},[_._v("#")]),_._v(" 2、解决方法")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("数据库选择mysql mongodb")])]),_._v(" "),t("li",[t("p",[_._v("QPS<10k，只要硬件差不多，不用加缓存也行，大于的话用redis缓存。")])]),_._v(" "),t("li",[t("p",[_._v("读大于写，读写分离，一写，多读")])]),_._v(" "),t("li",[t("p",[_._v("写大于读，索引优化，垂直分表，水平分表，垂直分库，水平分库")])])]),_._v(" "),t("p",[_._v("性能优化套路：")]),_._v(" "),t("p",[_._v("优化数据库索引--加缓存 -- 水平拆数据库表--垂直拆数据库表--水平分库--垂直分库--加机器")]),_._v(" "),t("h3",{attrs:{id:"_3、常见知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、常见知识"}},[_._v("#")]),_._v(" 3、常见知识")]),_._v(" "),t("ul",[t("li",[_._v("Nginx：能轻松的处理c100k问题，内存越大，能处理的并发量越高")]),_._v(" "),t("li",[_._v("Redis: https://redis.io/topics/benchmarks 表明，对于GET/SET来说，QPS 10-100k没啥大问题")]),_._v(" "),t("li",[_._v("MySQL: https://www.mysql.com/why-mysql/benchmarks/ 表明，对于只读，QPS 几百k没啥问题，对于写，MySQL 5.7 QPS 100k 几乎是上限")])]),_._v(" "),t("h3",{attrs:{id:"_4、常见问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、常见问题"}},[_._v("#")]),_._v(" 4、常见问题")]),_._v(" "),t("h4",{attrs:{id:"扩展性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩展性"}},[_._v("#")]),_._v(" 扩展性")]),_._v(" "),t("p",[_._v("负载均衡")]),_._v(" "),t("p",[_._v("缓存")]),_._v(" "),t("p",[_._v("数据库扩展--主从复制架构")]),_._v(" "),t("p",[_._v("服务端扩展--docker，节点自动伸缩")]),_._v(" "),t("h4",{attrs:{id:"一致性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一致性"}},[_._v("#")]),_._v(" 一致性")]),_._v(" "),t("p",[_._v("数据库与缓存不一致（根据业务需求决定，本系统并不需要达到实时的数据交互能力，所以使用有过期时间的缓存就行）")]),_._v(" "),t("h4",{attrs:{id:"如何保证高并发能力"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何保证高并发能力"}},[_._v("#")]),_._v(" 如何保证高并发能力")]),_._v(" "),t("p",[_._v("答：前端使用缓存与CDN、每个服务都有多个服务节点支撑以及对应的负载均衡、将热点数据通过放入缓存中提高抓取数据的性能、将复杂操作使用队列异步执行任务、数据库读写分离对读与写操作分别进行数据库层面上的优化")]),_._v(" "),t("h3",{attrs:{id:"_5、常见设计问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、常见设计问题"}},[_._v("#")]),_._v(" 5、常见设计问题")]),_._v(" "),t("h4",{attrs:{id:"高并发抢红包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高并发抢红包"}},[_._v("#")]),_._v(" 高并发抢红包")]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("## 题目\n\n总共有10亿个红包，在某个时间一起来抢红包，如何设计\n\n## 分析\n\n主要考察的是如何设计高并发系统，但实际上存在一定变通处理方式，不一定全在技术上\n\n通常在考虑系统QPS时，应当按业务上的极限QPS作为系统必须承担的QPS设计，比如10亿个红包，因为用户量巨大，极限QPS是可能是10亿\n\n但是一般来说几万QPS已经是比较高的并发了，就需要比较大的集群和高并发架构来处理了，所以不可能真正实现10亿的并发架构，而是通过一些变通的方法来处理，比如在业务上做一些处理规避掉部分流量\n\n但尽可能地需要实现高并发架构，思路是将大部分流量拦截在系统承载能力低的模块之前\n\n## 回答\n\n#### 业务上适当规避\n\n在相应法律法规、规章制度、活动说明、用户体验允许的情况下，可以做以下处理\n\n1. 根据某些规则对部分用户直接返回没抢到。比如有些用户曾经被系统识别为恶意用户、垃圾用户、僵尸用户，直接告诉用户已经抢完\n2. 分散不同客户端打开活动入口的时间。比如将1秒内的10亿流量分散到10秒，那么平均每秒只有1亿了\n3. 增加客户端入口点击门槛。比如需要手机摇一摇、画一个图案才能触发抢红包的接口\n\n#### 技术上硬核抗压\n\n网关是会接触实打实10亿流量的地方，也是拦截掉最多无效流量的地方，同理，缓存也是\n\n1. 限流策略。比如在压力测试中我们测到系统1亿QPS达到了极限，那么超过的部分直接返回已经抢完，通过Nginx的lua脚本可以查redis看到QPS数据从而可以动态调节\n2. 作弊拦截。通过对UA、IP规则直接将抢红包的作弊流量拦截掉\n3. 异步削峰。对Redis中的红包预减数量，立即返回抢红包成功请用户等待，然后把发送消息发给消息队列，进行流量的第二次削峰，让后台服务慢慢处理\n4. 服务逻辑。比如业务逻辑是使用事务控制对数据库的创建红包记录，减红包数量的操作，那么创建操作要放到减数量操作之前，从而避免减数量update的行锁持有时间\n5. 机器配置。当然是服务器机器配置约高越好，数据库配置越猛越好，高并发抢红包主要是CPU的负载较高，要选择偏向CPU性能的机器\n")])])]),t("h3",{attrs:{id:"_6、面向对象设计的面试问题及解答"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、面向对象设计的面试问题及解答"}},[_._v("#")]),_._v(" 6、面向对象设计的面试问题及解答")]),_._v(" "),t("h4",{attrs:{id:"设计一个停车场"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计一个停车场"}},[_._v("#")]),_._v(" 设计一个停车场")]),_._v(" "),t("p",[_._v("问题描述")]),_._v(" "),t("p",[_._v("支持摩托车、汽车、公共汽车，每种类型的车辆占用不同数量的停车位，小车可以占大的停车位")]),_._v(" "),t("p",[_._v("交通工具为父类，字段（车辆大小，车牌，停车位置大小），方法（删除-停车位删除，添加-停车位，能否占位），子类为摩托车、汽车、公共汽车")]),_._v(" "),t("p",[_._v("停车场，字段（车位）,方法（看是否满了能停车）")]),_._v(" "),t("h4",{attrs:{id:"设计一个聊天服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计一个聊天服务"}},[_._v("#")]),_._v(" 设计一个聊天服务")]),_._v(" "),t("p",[_._v("用户服务，字段map（用户id，用户名字），方法（增加用户，删除用户，加好友请求，拒绝好友请求）")]),_._v(" "),t("p",[_._v("用户，字段（用户id，用户名字，密码），方法（向用户发消息，向组发消息，通过拒绝好友请求）")]),_._v(" "),t("p",[_._v("父类-聊天，字段（聊天id，用户列表，聊天信息列表），子类-个人聊天，组聊天")]),_._v(" "),t("h4",{attrs:{id:"电梯设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#电梯设计"}},[_._v("#")]),_._v(" 电梯设计")]),_._v(" "),t("p",[_._v("需求: 以面向对象的方式设计一个电梯, 包含一些必要的类和函数.")]),_._v(" "),t("p",[_._v("问问题：载重，载入数 是否考虑，运行范围是几层到几层，电梯还是多个电梯")]),_._v(" "),t("p",[_._v("电梯本身的类，字段（当前楼层，方向，载重，载入数），方法（开关门，向上下移动，更新状态，停止）")]),_._v(" "),t("p",[_._v("请求类，采用singleton模式, 用于接收用户请求, 和电梯提供给电梯下一个目标楼层, 和删除请求")]),_._v(" "),t("p",[_._v("user类, 可以使得用户通过这个类提供的接口发出请求.")]),_._v(" "),t("h4",{attrs:{id:"计算器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算器"}},[_._v("#")]),_._v(" 计算器")]),_._v(" "),t("p",[_._v("接口Object  ，方法result()int")]),_._v(" "),t("p",[_._v("加法类，实现result")]),_._v(" "),t("p",[_._v("减法类，实现result")]),_._v(" "),t("p",[_._v("乘法类，实现result")]),_._v(" "),t("p",[_._v("除法类，实现result")]),_._v(" "),t("p",[_._v("factory(a int,b int,ca string)")]),_._v(" "),t("h4",{attrs:{id:"买票"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#买票"}},[_._v("#")]),_._v(" 买票")]),_._v(" "),t("p",[_._v("system类，方法能否买票")]),_._v(" "),t("p",[_._v("people类，字段(id age name)")]),_._v(" "),t("h4",{attrs:{id:"策略模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[_._v("#")]),_._v(" 策略模式")]),_._v(" "),t("p",[_._v("一个接口MM，Pao()")]),_._v(" "),t("p",[_._v("类girl，实现Pao")]),_._v(" "),t("p",[_._v("类woman，实现Pao")]),_._v(" "),t("p",[_._v("类MMC，字段（name age，paos MM）实现Pao(paos.Pao())")]),_._v(" "),t("h4",{attrs:{id:"建造者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#建造者模式"}},[_._v("#")]),_._v(" 建造者模式")]),_._v(" "),t("p",[_._v("接口Builder ，part1()，part2()，part3()")]),_._v(" "),t("p",[_._v("类StringBuilder ，实现part1()，part2()，part3()")]),_._v(" "),t("p",[_._v("类IntBuilder ，实现part1()，part2()，part3()")]),_._v(" "),t("p",[_._v("类Director ，字段(builder  Builder)，Makedata(builder.part1()，builder.part2()，builder.part3())")]),_._v(" "),t("p",[_._v("path   component   name   children   icon")]),_._v(" "),t("p",[_._v("detail    list    create    delete   update")])])}),[],!1,null,null,null);a.default=r.exports}}]);