(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{430:function(_,v,t){"use strict";t.r(v);var s=t(24),p=Object(s.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h4",{attrs:{id:"函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[_._v("#")]),_._v(" 函数")]),_._v(" "),t("p",[_._v("map ,省去了写for循环过程")]),_._v(" "),t("p",[_._v("filter")]),_._v(" "),t("p",[_._v("re.findall(规则，str)")]),_._v(" "),t("p",[_._v("lambda为匿名函数 ,a省去了定义函数")]),_._v(" "),t("p",[_._v("extend可以将另一个集合中的元素逐一添加到列表中")]),_._v(" "),t("p",[_._v("list.sort(reverse=False)排序")]),_._v(" "),t("p",[_._v("raise抛出异常")]),_._v(" "),t("p",[_._v("random.random()生成0-1之间的随机小数")]),_._v(" "),t("p",[_._v('res=str.count("aa")统计计数')]),_._v(" "),t("p",[_._v("zip()打包为元组的列表")]),_._v(" "),t("p",[_._v("GIL 是python的全局解释器锁")]),_._v(" "),t("h4",{attrs:{id:"注意点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注意点"}},[_._v("#")]),_._v(" 注意点")]),_._v(" "),t("p",[_._v("list删除用remove")]),_._v(" "),t("p",[_._v("b=[j for j in a]  对象用一行转为列表")]),_._v(" "),t("p",[_._v("n=''.join(list)   列表转为字符串")]),_._v(" "),t("p",[_._v("json.dumps()字典转json字符串，json.loads()json转字典")]),_._v(" "),t("p",[_._v("sorted有返回值，sort无返回值")]),_._v(" "),t("h4",{attrs:{id:"常见问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[_._v("#")]),_._v(" 常见问题")]),_._v(" "),t("p",[t("strong",[_._v("__new__和__init__区别")])]),_._v(" "),t("p",[t("strong",[_._v("python传参数是传值还是传址")])]),_._v(" "),t("p",[_._v("如果函数收到的是一个可变对象（比如字典或者列表）的引用，就能修改对象的原始值－－相当于通过“传引用”来传递对象。")]),_._v(" "),t("p",[_._v("如果函数收到的是一个不可变对象（比如数字、字符或者元组）的引用，就不能直接修改原始对象－－相当于通过“传值'来传递对象。")]),_._v(" "),t("p",[t("strong",[_._v("提高python运行效率的方法")])]),_._v(" "),t("ul",[t("li",[_._v("1、使用生成器，因为可以节约大量内存\n列表生成式的[]改成()，就创建了一个generator")]),_._v(" "),t("li",[_._v("2、循环代码优化，避免过多重复代码的执行\n减少时间复杂度")]),_._v(" "),t("li",[_._v("3、核心模块用Cython PyPy等，提高效率\nCPython：是用C语言实现Pyhon.")]),_._v(" "),t("li",[_._v("4、多进程、多线程、协程")]),_._v(" "),t("li",[_._v("5、多个if elif条件判断，可以把最有可能先发生的条件放到前面写，这样可以减少程序判断的次数，提高效率")])]),_._v(" "),t("p",[t("strong",[_._v("分别从前端、后端、数据库阐述web项目的性能优化")])]),_._v(" "),t("p",[_._v("前端优化：")]),_._v(" "),t("ul",[t("li",[_._v("1、减少http请求、例如制作精灵图")]),_._v(" "),t("li",[_._v("2、html和CSS放在页面上部，javascript放在页面下面，因为js加载比HTML和Css加载慢，所以要优先加载html和css,以防页面显示不全，性能差，也影响用户体验差")])]),_._v(" "),t("p",[_._v("后端优化：")]),_._v(" "),t("ul",[t("li",[_._v("1、缓存存储读写次数高，变化少的数据，比如网站首页的信息、商品的信息等。应用程序读取数据时，一般是先从缓存中读取，如果读取不到或数据已失效，再访问磁盘数据库，并将数据再次写入缓存。")]),_._v(" "),t("li",[_._v("2、异步方式，如果有耗时操作，可以采用异步，比如celery")]),_._v(" "),t("li",[_._v("3、代码优化，避免循环和判断次数太多，如果多个if else判断，优先判断最有可能先发生的情况")])]),_._v(" "),t("p",[_._v("数据库优化：")]),_._v(" "),t("ul",[t("li",[_._v("1、如有条件，数据可以存放于redis，读取速度快")]),_._v(" "),t("li",[_._v("2、建立索引、外键等")])]),_._v(" "),t("p",[t("strong",[_._v("python中copy和deepcopy区别")])]),_._v(" "),t("p",[_._v("1、复制不可变数据类型，不管copy还是deepcopy,都是同一个地址当浅复制的值是不可变对象（数值，字符串，元组）时和=“赋值”的情况一样，对象的id值与浅复制原来的值相同。")]),_._v(" "),t("p",[_._v("2、复制的值是可变对象（列表和字典）")]),_._v(" "),t("p",[_._v("浅拷贝copy有两种情况：")]),_._v(" "),t("ul",[t("li",[_._v("第一种情况：复制的 对象中无 复杂 子对象，原来值的改变并不会影响浅复制的值，同时浅复制的值改变也并不会影响原来的值。原来值的id值与浅复制原来的值不同。")]),_._v(" "),t("li",[_._v("第二种情况：复制的对象中有 复杂 子对象 （例如列表中的一个子元素是一个列表）， 改变原来的值 中的复杂子对象的值 ，会影响浅复制的值。\n深拷贝deepcopy：完全复制独立，包括内层列表和字典")])]),_._v(" "),t("ol",{attrs:{start:"3"}},[t("li")]),_._v(" "),t("p",[_._v("而对于数字、字符串以及其它“原子”类型，没有拷贝一说，产生的都是原对象的引用。\n浅拷贝：共享内存，传引用\n深拷贝：新开辟内存")])])}),[],!1,null,null,null);v.default=p.exports}}]);