(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{434:function(t,a,v){"use strict";v.r(a);var _=v(24),r=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"设计模式的六大原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的六大原则"}},[t._v("#")]),t._v(" 设计模式的六大原则")]),t._v(" "),v("h3",{attrs:{id:"开放-封闭原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开放-封闭原则"}},[t._v("#")]),t._v(" 开放-封闭原则")]),t._v(" "),v("p",[t._v("​\t对扩展开放，对修改关闭")]),t._v(" "),v("h3",{attrs:{id:"里氏代换原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#里氏代换原则"}},[t._v("#")]),t._v(" 里氏代换原则")]),t._v(" "),v("p",[t._v("​\t任何基类可以出现的地方，子类一定可以出现")]),t._v(" "),v("h3",{attrs:{id:"依赖倒转原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#依赖倒转原则"}},[t._v("#")]),t._v(" 依赖倒转原则")]),t._v(" "),v("p",[t._v("​\t抽象不应该依赖于细节，细节应该依赖于抽象")]),t._v(" "),v("h3",{attrs:{id:"接口隔离原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#接口隔离原则"}},[t._v("#")]),t._v(" 接口隔离原则")]),t._v(" "),v("p",[t._v("使用多个隔离的接口，比使用单个接口要好")]),t._v(" "),v("h3",{attrs:{id:"迪米特法则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#迪米特法则"}},[t._v("#")]),t._v(" 迪米特法则")]),t._v(" "),v("p",[t._v("一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立")]),t._v(" "),v("h3",{attrs:{id:"合成-聚合复用原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#合成-聚合复用原则"}},[t._v("#")]),t._v(" 合成/聚合复用原则")]),t._v(" "),v("p",[t._v("尽量使用合成/聚合的方式，而不是使用继承。")]),t._v(" "),v("h2",{attrs:{id:"设计模式分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式分类"}},[t._v("#")]),t._v(" 设计模式分类")]),t._v(" "),v("h3",{attrs:{id:"创建型模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[t._v("#")]),t._v(" 创建型模式")]),t._v(" "),v("p",[t._v("Abstract Factory抽象工厂模式：提供一个创建一系列相关或者相互依赖对象的接口，而无需指定他们具体的类")]),t._v(" "),v("p",[t._v("Builder建造者模式："),v("strong",[t._v("将一个复杂对象的构建与它表示分离，使得同样的构建过程可以创建不同的表示")])]),t._v(" "),v("p",[t._v("Factory Method工厂方法模式："),v("strong",[t._v("定义一个用于创建对象的接口，让子类决定实例化哪一个类")]),t._v("。工厂方法使一个类的实例化延迟到其子类")]),t._v(" "),v("p",[t._v("Prototype 原型模式：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象（clone浅复制、深复制）")]),t._v(" "),v("p",[t._v("Singleton单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点。")]),t._v(" "),v("h3",{attrs:{id:"结构型模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[t._v("#")]),t._v(" 结构型模式")]),t._v(" "),v("p",[t._v("Adapter适配器模式：将一个类的接口"),v("strong",[t._v("转换成")]),t._v("客户端希望的另一个接口。适配器模式使得原本由于接口不兼容而"),v("strong",[t._v("不能一起工作的那些类可以一起工作")])]),t._v(" "),v("p",[t._v("Bridge桥接模式：将抽象化(Abstraction)与实现化(Implementation)脱耦，使得二者可以独立地变化；")]),t._v(" "),v("p",[t._v("Composite合成/组合模式：将对象组合成树形结构，以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性")]),t._v(" "),v("p",[t._v("Decorator装饰模式：动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。")]),t._v(" "),v("p",[t._v("Facade 外观模式为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用")]),t._v(" "),v("p",[t._v("Flyweight 享元模式：运用共享技术有效地支持大量细粒度的对象")]),t._v(" "),v("p",[t._v("Proxy 代理模式：为其他对象提供一种代理，以控制对这个对象的访问。")]),t._v(" "),v("h3",{attrs:{id:"行为性模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#行为性模式"}},[t._v("#")]),t._v(" 行为性模式")]),t._v(" "),v("p",[t._v("Chain Of Responsibility 职责链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止")]),t._v(" "),v("p",[t._v("Command 命令模式：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作")]),t._v(" "),v("p",[t._v("Interpreter 解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子")]),t._v(" "),v("p",[t._v("Iterator 迭代器模式：提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示")]),t._v(" "),v("p",[t._v("Mediator 中介者模式：用一个中介对象来封装一系列的对象交互。中介这使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。")]),t._v(" "),v("p",[t._v("Memento 备忘录模式：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可以将该对象恢复到原先保存的状态")]),t._v(" "),v("p",[t._v("Observer 观察者模式：定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生改变时，会通知所有观察者对象，使它们能够自动更新自己。")]),t._v(" "),v("p",[t._v("State 状态模式：当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类")]),t._v(" "),v("p",[t._v("Strategy 策略模式："),v("strong",[t._v("它定义了算法家族，分别封装起来，让它们可以相互替换")]),t._v("，此模式让算法的变化，不会影响到使用算法的客户。")]),t._v(" "),v("p",[t._v("Template Methed模板方法：定义一个操作中的算法的骨架，而将一些具体步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。")]),t._v(" "),v("p",[t._v("Visitor 访问者模式：表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作")])])}),[],!1,null,null,null);a.default=r.exports}}]);