(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{418:function(t,n,s){"use strict";s.r(n);var a=s(24),o=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"常见跨域场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见跨域场景"}},[t._v("#")]),t._v(" "),s("strong",[t._v("常见跨域场景")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("URL                                      说明                    是否允许通信\nhttp://www.domain.com/a.js\nhttp://www.domain.com/b.js         同一域名，不同文件或路径           允许\nhttp://www.domain.com/lab/c.js\n\nhttp://www.domain.com:8000/a.js\nhttp://www.domain.com/b.js         同一域名，不同端口                不允许\n \nhttp://www.domain.com/a.js\nhttps://www.domain.com/b.js        同一域名，不同协议                不允许\n \nhttp://www.domain.com/a.js\nhttp://192.168.4.12/b.js           域名和域名对应相同ip              不允许\n \nhttp://www.domain.com/a.js\nhttp://x.domain.com/b.js           主域相同，子域不同                不允许\nhttp://domain.com/c.js\n \nhttp://www.domain1.com/a.js\nhttp://www.domain2.com/b.js        不同域名          \n")])])]),s("h3",{attrs:{id:"跨域解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨域解决方案"}},[t._v("#")]),t._v(" "),s("strong",[t._v("跨域解决方案")])]),t._v(" "),s("p",[t._v("1、 通过jsonp跨域\n2、 跨域资源共享（CORS）\n3、 nginx代理跨域")]),t._v(" "),s("h4",{attrs:{id:"一、-通过jsonp跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、-通过jsonp跨域"}},[t._v("#")]),t._v(" "),s("strong",[t._v("一、 通过jsonp跨域")])]),t._v(" "),s("p",[t._v("通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。")]),t._v(" "),s("h4",{attrs:{id:"二、域资源共享（cors）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、域资源共享（cors）"}},[t._v("#")]),t._v(" 二、域资源共享（CORS）")]),t._v(" "),s("p",[t._v("普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。")]),t._v(" "),s("p",[t._v("需注意的是：由于同源策略的限制，所读取的cookie为跨域请求接口所在域的cookie，而非当前页。如果想实现当前页cookie的写入，可参考下文：七、nginx反向代理中设置proxy_cookie_domain 和 八、NodeJs中间件代理中cookieDomainRewrite参数的设置。")]),t._v(" "),s("p",[t._v("目前，所有浏览器都支持该功能(IE8+：IE8/9需要使用XDomainRequest对象来支持CORS）)，CORS也已经成为主流的跨域解决方案。")]),t._v(" "),s("h4",{attrs:{id:"七、-nginx代理跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、-nginx代理跨域"}},[t._v("#")]),t._v(" "),s("strong",[t._v("七、 nginx代理跨域")])]),t._v(" "),s("h5",{attrs:{id:"_1、-nginx配置解决iconfont跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、-nginx配置解决iconfont跨域"}},[t._v("#")]),t._v(" "),s("strong",[t._v("1、 nginx配置解决iconfont跨域")])]),t._v(" "),s("p",[t._v("浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("location / {\n  add_header Access-Control-Allow-Origin *;\n}\n")])])])])}),[],!1,null,null,null);n.default=o.exports}}]);