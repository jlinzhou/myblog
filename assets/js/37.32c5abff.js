(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{426:function(t,_,v){"use strict";v.r(_);var s=v(24),a=Object(s.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"计算机网路"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#计算机网路"}},[t._v("#")]),t._v(" 计算机网路")]),t._v(" "),v("h3",{attrs:{id:"get和post区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#get和post区别"}},[t._v("#")]),t._v(" Get和Post区别")]),t._v(" "),v("p",[t._v("​\t安全性   长度限制   字符类型  数据包  书签")]),t._v(" "),v("ol",[v("li",[t._v("Get是不安全的，因为在传输过程，数据被放在请求的URL中；Post的所有操作对用户来说都是不可见的。")]),t._v(" "),v("li",[t._v("Get传送的数据量较小，这主要是因为受URL长度限制；Post传送的数据量较大，一般被默认为不受限制。")]),t._v(" "),v("li",[t._v("Get限制Form表单的数据集的值必须为ASCII字符；而Post支持整个ISO10646字符集。")]),t._v(" "),v("li",[t._v("Get执行效率却比Post方法好。Get是form提交的默认方法。")]),t._v(" "),v("li",[t._v("GET产生一个TCP数据包；POST产生两个TCP数据包。（非必然，客户端可灵活决定）")])]),t._v(" "),v("h3",{attrs:{id:"http请求的完全过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http请求的完全过程"}},[t._v("#")]),t._v(" Http请求的完全过程")]),t._v(" "),v("ol",[v("li",[t._v("浏览器根据域名解析IP地址（DNS）,并查DNS缓存")]),t._v(" "),v("li",[t._v("浏览器与WEB服务器建立一个TCP连接")]),t._v(" "),v("li",[t._v("浏览器给WEB服务器发送一个HTTP请求（GET/POST）：一个HTTP请求报文由请求行（request line）、请求头部（headers）、空行（blank line）和请求数据（request body）4个部分组成。")]),t._v(" "),v("li",[t._v("服务端响应HTTP响应报文，报文由状态行（status line）、相应头部（headers）、空行（blank line）和响应数据（response body）4个部分组成。")]),t._v(" "),v("li",[t._v("浏览器解析渲染")])]),t._v(" "),v("h3",{attrs:{id:"tcp和udp区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp和udp区别"}},[t._v("#")]),t._v(" tcp和udp区别")]),t._v(" "),v("p",[t._v("面向连接  可靠  字节流报文流  点对点多对多  开销  全双工可靠信道")]),t._v(" "),v("ol",[v("li",[t._v("TCP面向连接，UDP是无连接的，即发送数据之前不需要建立连接。")]),t._v(" "),v("li",[t._v("TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。")]),t._v(" "),v("li",[t._v("TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流，UDP是面向报文的，UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）")]),t._v(" "),v("li",[t._v("每一条TCP连接只能是点到点的，UDP支持一对一，一对多，多对一和多对多的交互通信。")]),t._v(" "),v("li",[t._v("TCP首部开销20字节，UDP的首部开销小，只有8个字节。")]),t._v(" "),v("li",[t._v("TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道。")])]),t._v(" "),v("h3",{attrs:{id:"tcp和udp的优点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp和udp的优点"}},[t._v("#")]),t._v(" tcp和udp的优点")]),t._v(" "),v("ul",[v("li",[t._v("**TCP的优点： 可靠，稳定 **TCP的可靠体现在TCP在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源。 "),v("strong",[t._v("TCP的缺点： 慢，效率低")]),t._v("，占用系统资源高，易被攻击 TCP在传递数据之前，要先建连接，这会消耗时间，而且在数据传递时，确认机制、重传机制、拥塞控制机制等都会消耗大量的时间，而且要在每台设备上维护所有的传输连接，事实上，每个连接都会占用系统的CPU、内存等硬件资源。 而且，因为TCP有确认机制、三次握手机制，这些也导致TCP容易被人利用，实现DOS、DDOS、CC等攻击。")]),t._v(" "),v("li",[v("strong",[t._v("UDP的优点： 快")]),t._v("，比TCP稍安全 UDP没有TCP的握手、确认、窗口、重传、拥塞控制等机制，UDP是一个无状态的传输协议，所以它在传递数据时非常快。没有TCP的这些机制，UDP较TCP被攻击者利用的漏洞就要少一些。但UDP也是无法避免攻击的，比如：UDP Flood攻击…… "),v("strong",[t._v("UDP的缺点： 不可靠")]),t._v("，不稳定 因为UDP没有TCP那些可靠的机制，在数据传递时，如果网络质量不好，就会很容易丢包。 基于上面的优缺点，那么： 什么时候应该使用TCP： 当对网络通讯质量有要求的时候，比如：整个数据要准确无误的传递给对方，这往往用于一些要求可靠的应用，比如HTTP、HTTPS、FTP等传输文件的协议，POP、SMTP等邮件传输的协议。 在日常生活中，常见使用TCP协议的应用如下： 浏览器，用的HTTP FlashFXP，用的FTP Outlook，用的POP、SMTP Putty，用的Telnet、SSH QQ文件传输。什么时候应该使用UDP： 当对网络通讯质量要求不高的时候，要求网络通讯速度能尽量的快，这时就可以使用UDP。 比如，日常生活中，常见使用UDP协议的应用如下： QQ语音 QQ视频 TFTP。")])]),t._v(" "),v("h3",{attrs:{id:"三次握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[t._v("#")]),t._v(" 三次握手")]),t._v(" "),v("p",[t._v("​\t客户端发送syn到服务器，")]),t._v(" "),v("p",[t._v("​\t服务器回复syn+ack")]),t._v(" "),v("p",[t._v("​\t客户端回复ack  established")]),t._v(" "),v("ul",[v("li",[t._v("第一次握手：建立连接时，客户端发送syn包（syn=x）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。")]),t._v(" "),v("li",[t._v("第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；")]),t._v(" "),v("li",[t._v("第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。")])]),t._v(" "),v("h3",{attrs:{id:"为什么不能两次握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么不能两次握手"}},[t._v("#")]),t._v(" 为什么不能两次握手")]),t._v(" "),v("p",[t._v("TCP是一个双向通信协议，通信双方都有能力发送信息，并接收响应。如果只是两次握手， 至多只有连接发起方的起始序列号能被确认， 另一方选择的序列号则得不到确认")]),t._v(" "),v("h3",{attrs:{id:"四次挥手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[t._v("#")]),t._v(" 四次挥手")]),t._v(" "),v("ol",[v("li",[t._v("客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。")]),t._v(" "),v("li",[t._v("服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。")]),t._v(" "),v("li",[t._v("客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。")]),t._v(" "),v("li",[t._v("服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。")]),t._v(" "),v("li",[t._v("客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。")]),t._v(" "),v("li",[t._v("服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些")])]),t._v(" "),v("p",[t._v("第一次挥手："),v("strong",[t._v("客户端发送一个FIN=M")]),t._v("，用来关闭客户端到服务器端的数据传送，客户端进入"),v("strong",[t._v("FIN_WAIT_1状态")]),t._v('。意思是说"我客户端没有数据要发给你了"，但是如果你服务器端还有数据没有发送完成，则不必急着关闭连接，可以继续发送数据。')]),t._v(" "),v("p",[t._v("第二次挥手：服务器端收到FIN后，先"),v("strong",[t._v("发送ack=M+1")]),t._v("，告诉客户端，你的请求我收到了，但是我还没准备好，请继续你等我的消息。这个时候客户端就进入**FIN_WAIT_2 **状态，继续等待服务器端的FIN报文。")]),t._v(" "),v("p",[t._v("第三次挥手：当服务器端确定数据已发送完成，则向客户端发送"),v("strong",[t._v("FIN=N")]),t._v("报文，告诉客户端，好了，我这边数据发完了，准备好关闭连接了。服务器端进入"),v("strong",[t._v("LAST_ACK")]),t._v("状态。")]),t._v(" "),v("p",[t._v("第四次挥手：客户端收到FIN=N报文后，就知道可以关闭连接了，但是他还是不相信网络，怕服务器端不知道要关闭，所以"),v("strong",[t._v("发送ack=N+1后进入TIME_WAIT状态")]),t._v("，如果Server端没有收到ACK则可以重传。服务器端收到ACK后，就知道可以断开连接了。客户端等待了"),v("strong",[t._v("2MSL后依然没有收到回复")]),t._v("，则证明服务器端已正常关闭，那好，我客户端也可以关闭连接了。最终完成了四次握手")]),t._v(" "),v("h3",{attrs:{id:"为什么连接的时候是三次握手，关闭的时候却是四次握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么连接的时候是三次握手，关闭的时候却是四次握手"}},[t._v("#")]),t._v(" 为什么连接的时候是三次握手，关闭的时候却是四次握手")]),t._v(" "),v("p",[t._v('因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，"你发的FIN报文我收到了"。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。')]),t._v(" "),v("h3",{attrs:{id:"http2介绍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http2介绍"}},[t._v("#")]),t._v(" Http2介绍")]),t._v(" "),v("p",[t._v("在http1.1基础上做了大量的改进")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("多路复用")])]),t._v(" "),v("li",[v("p",[t._v("二进制分帧")])]),t._v(" "),v("li",[v("p",[t._v("首部压缩")])]),t._v(" "),v("li",[v("p",[t._v("服务器推送")])])]),t._v(" "),v("p",[t._v("状态码401,301,302,201**")]),t._v(" "),v("p",[v("strong",[t._v("http 401,403")])]),t._v(" "),v("p",[t._v("400 bad request，请求报文存在语法错误\n401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息\n403 forbidden，表示对请求资源的访问被服务器拒绝")]),t._v(" "),v("p",[v("strong",[t._v("常见的HTTP相应状态码")])]),t._v(" "),v("p",[t._v("200：请求被正常处理\n204：请求被受理但没有资源可以返回\n206：客户端只是请求资源的一部分，服务器只对请求的部分资源执行GET方法，相应报文中通过Content-Range指定范围的资源。\n301：永久性重定向\n302：临时重定向\n303：与302状态码有相似功能，只是它希望客户端在请求一个URI的时候，能通过GET方法重定向到另一个URI上\n304：发送附带条件的请求时，条件不满足时返回，与重定向无关\n307：临时重定向，与302类似，只是强制要求使用POST方法\n400：请求报文语法有误，服务器无法识别\n401：请求需要认证\n403：请求的对应资源禁止被访问\n404：服务器无法找到对应资源\n500：服务器内部错误\n503：服务器正忙")]),t._v(" "),v("p",[t._v("​\tTCP/IP(事实上的标准)应用层  传输层  网络层  链路层(链网传应)")]),t._v(" "),v("p",[t._v("各层功能：")]),t._v(" "),v("p",[t._v("​\t\t链路层：ARP")]),t._v(" "),v("p",[t._v("​\t\t\t\t\t\t源MAC----目标MAC")]),t._v(" "),v("p",[t._v("​\t\t\t\t\t\tARP协议作用：借助IP获取mac地址")]),t._v(" "),v("p",[t._v("​\t\t网络层：IP")]),t._v(" "),v("p",[t._v("​\t\t\t\t\t\t源IP-----目标IP")]),t._v(" "),v("p",[t._v("​\t\t\t\t\t\tIP协议的作用：在网络环境中唯一标识一台主机")]),t._v(" "),v("p",[t._v("​\t\t\t\t\t\tIP地址本质：2进制数。-----点分十进制IP地址（string)")]),t._v(" "),v("p",[t._v("​\t\t传输层：TCP/UDP")]),t._v(" "),v("p",[t._v("​\t\t\t\t\t\tport----在一台主机上唯一标识一个进程。")]),t._v(" "),v("p",[t._v("​\t\t应用层：ftp、http、自定义")]),t._v(" "),v("p",[t._v("​\t\t\t\t\t\t对数据进行封装、解封装")])])}),[],!1,null,null,null);_.default=a.exports}}]);