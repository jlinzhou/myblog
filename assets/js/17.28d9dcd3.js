(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{406:function(t,n,e){"use strict";e.r(n);var r=e(24),a=Object(r.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"golang中defer、return、返回值之间执行顺序的坑"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#golang中defer、return、返回值之间执行顺序的坑"}},[t._v("#")]),t._v(" Golang中defer、return、返回值之间执行顺序的坑")]),t._v(" "),e("ol",[e("li",[t._v("多个defer的执行顺序为“后进先出”；")]),t._v(" "),e("li",[t._v("所有函数在执行RET返回指令之前，都会先检查是否存在defer语句，若存在则先逆序调用defer语句进行收尾工作再退出返回；")]),t._v(" "),e("li",[t._v("匿名返回值是在return执行时被声明，有名返回值则是在函数声明的同时被声明，因此在defer语句中只能访问有名返回值，而不能直接访问匿名返回值；")]),t._v(" "),e("li",[t._v("return其实应该包含前后两个步骤：第一步是给返回值赋值（若为有名返回值则直接赋值，若为匿名返回值则先声明再赋值）；第二步是调用RET返回指令并传入返回值，而RET则会检查defer是否存在，若存在就先逆序插播defer语句，最后RET携带返回值退出函数；")])]),t._v(" "),e("p",[t._v("‍‍**因此，**‍‍defer、return、返回值三者的执行顺序应该是：return最先给返回值赋值；接着defer开始执行一些收尾工作；最后RET指令携带返回值退出函数。")]),t._v(" "),e("p",[t._v("参考资料:"),e("a",{attrs:{href:"https://my.oschina.net/henrylee2cn/blog/505535",target:"_blank",rel:"noopener noreferrer"}},[t._v("Golang中defer、return、返回值之间执行顺序的坑"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"go-string-实现原理剖析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#go-string-实现原理剖析"}},[t._v("#")]),t._v(" Go string 实现原理剖析")]),t._v(" "),e("p",[t._v("string是8比特字节的集合，通常但并不一定是UTF-8编码的文本。")]),t._v(" "),e("p",[e("strong",[t._v("string 数据结构")])]),t._v(" "),e("p",[t._v("源码包"),e("code",[t._v("src/runtime/string.go:stringStruct")]),t._v("定义了string的数据结构：")]),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" stringStruct "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tstr unsafe"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pointer\n\t"),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("其数据结构很简单：")]),t._v(" "),e("ul",[e("li",[t._v("stringStruct.str：字符串的首地址；")]),t._v(" "),e("li",[t._v("stringStruct.len：字符串的长度；")])]),t._v(" "),e("p",[t._v("参考资料："),e("a",{attrs:{href:"https://www.jishuwen.com/d/2MWe",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go string 实现原理剖析（你真的了解string吗）"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"channel，为什么它可以做到线程安全？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#channel，为什么它可以做到线程安全？"}},[t._v("#")]),t._v(" channel，为什么它可以做到线程安全？")]),t._v(" "),e("p",[t._v("Channel是Go中的一个核心类型，可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication),Channel也可以理解是一个先进先出的队列，通过管道进行通信。")]),t._v(" "),e("p",[t._v("**Golang的Channel,发送一个数据到Channel 和 从Channel接收一个数据 都是 原子性的。**而且Go的设计思想就是:不要通过共享内存来通信，而是通过通信来共享内存，前者就是传统的加锁，后者就是Channel。也就是说，设计Channel的主要目的就是在多任务间传递数据的，这当然是安全的。")])])}),[],!1,null,null,null);n.default=a.exports}}]);